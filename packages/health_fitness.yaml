binary_sensor:
  - platform: template
    sensors:
      william_medicated_recently:
        friendly_name: William Medicated Recently
        entity_id: sensor.time
        value_template: >
          {{ as_timestamp(now()) - state_attr('input_datetime.william_last_medicated','timestamp') < 57600 }}

sensor:
  - platform: fitbit
    clock_format: 12H
    monitored_resources:
      - "activities/heart"
      - "activities/steps"
      - "body/bmi"
      - "body/fat"
      - "body/weight"
          
input_datetime:
    william_last_medicated:
      name: Last Medicated
      has_date: true
      has_time: true

homeassistant:
  customize:
    sensor.fitness_tracker:
      icon: mdi:watch
      hidden: false
    binary_sensor.william_medicated_recently:
      icon: mdi:pill
      hidden: true
    input_datetime.william_last_medicated:
      icon: mdi:pill
    
group:
  william_health_fitness:
    name: William's Health & Fitness
    control: hidden
    entities:
      - sensor.fitness_tracker_state
      - sensor.bmi
      - sensor.body_fat
      - sensor.resting_heart_rate
      - sensor.steps
      - sensor.weight
      - binary_sensor.william_medicated_recently
      - input_datetime.william_last_medicated
      
automation:
  - id: FitnessTrackerCharging
    alias: Fitness Tracker Charging
    initial_state: on
    trigger:
      - platform: state
        entity_id: sensor.william_fitness_tracker
        from: Worn
    action:
      - service: script.notify
        data:
          no_notify: true
          no_inform: true
          tell: william
          message: I'll let you know when your fitness tracker is ready to be worn again!
      - service: automation.turn_on
        entity_id: automation.fitness_tracker_charged
  - id: FitnessTrackerCharged
    alias: Fitness Tracker Charged
    initial_state: on
    trigger:
      - platform: state
        entity_id: sensor.william_fitness_tracker
        to: Charged
    condition:
      condition: template
      value_template: "{{ states('sensor.william_status') not in ['Sleeping'] }}"
    action:
      - service: script.notify
        data:
          tell: william
          message: your fitness tracker is fully charged and ready to be worn now!
      - service: automation.turn_off
        entity_id: automation.fitness_tracker_charged
  - id: FitnessTrackerReminder
    alias: Fitness Tracker Reminder
    initial_state: on
    trigger:
      - platform: state
        entity_id: binary_sensor.master_bathroom_shower
        to: 'off'
        for: '00:10:00'
      - platform: time
        hours: '/1'
        minutes: 00
        seconds: 00
    condition:
      condition: template
      value_template: >
        {{ not is_state('sensor.william_fitness_tracker','Worn') 
        and states('sensor.william_status') not in ['Sleeping','Waking'] }}
    action:
      - service: script.notify
        data:
          tell: william
          message: you aren't wearing your fitness tracker!  Therefore, I cannot fully monitor your health and fitness.  Your fitness tracker is fully charged, please wear it now!
          
script:
  william_medication_taken:
    alias: William's Medication Taken
    sequence:
      - service: input_datetime.set_datetime
        data_template:
          entity_id: input_datetime.william_last_medicated
          date: "{{ now().year }}-{{ now().month }}-{{ now().day }}"
          time: "{{ now().hour }}:{{ now().minute }}:{{ now().second }}"